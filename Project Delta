local players = game:GetService("Players")
---------------SETTINGS
local toCheck = {331884653, 50464767, 1325214718, 209115414, 492950799, 480028224, 23464315, 72424171, 3248886710, 3252863039, 115733667, 1443984069, 122336558, 385583913, 17698974, 112018154, 82434787, 1078421531, 60738975, 3248981945, 209115414, 3249145655, 2494008975, 17953224, 47197717}--Add the UserId's of the people you want to check for
local canLeave = false --If you want to auto leave the game then change this to true
local canKick = true--If you have a anti client kick executed set this to false
local notificationsEnabled = true -- set to false if the game can detect notifications
local kickmessage = "" --The message you want when you're kicked. canKick must be true
-----------------
function check(player)
    for i,v in pairs(toCheck) do 
        if tostring(v) == tostring(player.UserId)then
            return true
        end
    end
    return false
end
function notify(title,text,duritation)
    game:GetService("StarterGui"):SetCore("SendNotification",{
        Title = title;
        Text = text;
        Duritation = 100;
    })
end
function crash(o)
    if o then
        if kickMessage=="" then 
        players.LocalPlayer:Kick("A player in your toCheck table is currently in this game")
        else
            players.LocalPlayer:kick(kickMessage)
        end
    else
        pcall(function() players.LocalPlayer.Character:BreakJoints() end)--kills you
        wait(1)
		pcall(function()
            local part = Instance.new("Part")
            local d = part.TouchEnded:Connect(print)
            part.DescendantRemoving:Connect(function()
            d:Disconnect()
            end)
            part:Destroy()
        end)--this should close your game instantly
        while true do print('k') end--if all else fails this will freeze your game
    end
end

for i,v in pairs(players:GetPlayers())do--I told you.
    if check(v) and canLeave then
        crash(canKick)
    elseif check(v) then
        if notificationsEnabled then
            notify("WARNING",v.Name.." is in game and is on your detection list",5)
        end
    end
end

players.PlayerAdded:Connect(function(player)--I told you x2.
    if check(player) and canLeave then
        crash(canKick)
    elseif check(player) then
        if notificationsEnabled then
            notify("WARNING",player.Name.." has joined as is on your detection list",5)
        end
    end
end)

if notificationsEnabled then
    notify("Welcone","Welcome,"..players.LocalPlayer.Name,5)
    notify("REMEMBER","Remember to configure your settings at the top of the script!",5)
end

if notificationsEnabled==false and canLeave == false and canKick == false then
    print("The fuck are you executing this script for?")
end

loadstring(game:HttpGet(('https://raw.githubusercontent.com/Shoplifter4722/Dolphin/main/Delta')))()

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/AikaV3rm/UiLib/master/Lib.lua')))()

local w = library:CreateWindow("Project Delta") -- Creates the window

local a = w:CreateFolder("Items") -- Creates the folder(U will put here your buttons,etc)

a:Button("Mosin",function()
    local ItemToSearchFor = "MOSIN" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Ruble",function()
    local ItemToSearchFor = "Ruble" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)


a:Button("Attak5",function()
    local ItemToSearchFor = "Attak5" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Altyn",function()
    local ItemToSearchFor = "Altyn" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)


a:Button("6b45",function()
    local ItemToSearchFor = "6b43" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("FlareGun",function()
    local ItemToSearchFor = "FlareGun" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("SVD",function()
    local ItemToSearchFor = "SVD" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Tortilla",function()
    local ItemToSearchFor = "Tortilla" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("FastMT",function()
    local ItemToSearchFor = "FastMT" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Spec Op Pistol",function()
    local ItemToSearchFor = "TFZ0" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Brake Atttachments",function()
    local ItemToSearchFor = "Brake" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("6b5",function()
    local ItemToSearchFor = "6b5" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Spec",function()
    local ItemToSearchFor = "Spec" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("M4",function()
    local ItemToSearchFor = "M4" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("AKS",function()
    local ItemToSearchFor = "AKM" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Zsh",function()
    local ItemToSearchFor = "zsh" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Polymer",function()
    local ItemToSearchFor = "Poly" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("556x45",function()
    local ItemToSearchFor = "556x45" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Fast visor",function()
    local ItemToSearchFor = "Fast" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("JPC",function()
    local ItemToSearchFor = "JPC" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Suit",function()
    local ItemToSearchFor = "Suit" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)


