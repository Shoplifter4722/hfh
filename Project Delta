
local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/AikaV3rm/UiLib/master/Lib.lua')))()

local w = library:CreateWindow("Project Delta") -- Creates the window

local a = w:CreateFolder("Items") -- Creates the folder(U will put here your buttons,etc)

a:Button("Aimbot",function()
    loadstring(game:HttpGet(('https://raw.githubusercontent.com/Shoplifter4722/Dolphin/main/Delta')))()
end)

a:Button("Mosin",function()
    local ItemToSearchFor = "MOSIN" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Ruble",function()
    local ItemToSearchFor = "Ruble" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)


a:Button("Attak5",function()
    local ItemToSearchFor = "Attak5" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Altyn",function()
    local ItemToSearchFor = "Altyn" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)


a:Button("6b45",function()
    local ItemToSearchFor = "6b43" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("FlareGun",function()
    local ItemToSearchFor = "FlareGun" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("SVD",function()
    local ItemToSearchFor = "SVD" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Tortilla",function()
    local ItemToSearchFor = "Tortilla" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("FastMT",function()
    local ItemToSearchFor = "FastMT" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Spec Op Pistol",function()
    local ItemToSearchFor = "TFZ0" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("Brake Atttachments",function()
    local ItemToSearchFor = "Brake" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("6b5",function()
    local ItemToSearchFor = "6b5" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("PNK",function()
    local ItemToSearchFor = "PNK" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("M4",function()
    local ItemToSearchFor = "M4" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)

a:Button("AKS",function()
    local ItemToSearchFor = "AKM" -- Item you want
    local BlacklistedNames = {"Front", "Handle", "Hider"} -- Blacklisted Items
    
    function IsBlacklisted(Name)
       local Pass = false
       
       for NameIndex,BlacklistedName in pairs(BlacklistedNames) do
           if Name:lower():find(BlacklistedName:lower()) then
              Pass = true
              break
           end
       end
       
       return Pass
    end
    
    local Module = require(game.Players.LocalPlayer.PlayerGui.MainGui.Modules.InventoryFunctions)
    local InventoriesSearched = {}
    for _,v in next, workspace:GetDescendants() do
       if v:IsA("StringValue") and v.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(v.Name) == false and v.Parent.Name == "Inventory" and not (InventoriesSearched[v.Parent.Parent] or InventoriesSearched[v.Parent.Parent.Parent.Parent]) then
           local ObjectToLoot = v.Parent.Parent
           if ObjectToLoot:IsA("Model") then else
               ObjectToLoot = ObjectToLoot.Parent.Parent
           end
           
           InventoriesSearched[ObjectToLoot] = true
           
           if ObjectToLoot.PrimaryPart then
               if not game.Players:GetPlayerFromCharacter(ObjectToLoot) then
                   Module.self.GameplayVariables.CurrentContainer.Value = ObjectToLoot
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(Module.self.GameplayVariables.CurrentContainer.Value, game.Players.LocalPlayer.Character.PrimaryPart.Position)
                   Module:ToggleBackpack(true, true)
                   
                   wait(0.5)
                   
                   for _,Cont in next, game.Players.LocalPlayer.PlayerGui.MainGui.MainFrame.BackpackFrame.Loot.Inventory.ScrollingFrame:GetDescendants() do
                       if Cont.Name == "Item" and Cont:IsA("ObjectValue") and Cont.Value and Cont.Value.Name:lower():find(ItemToSearchFor:lower()) and IsBlacklisted(Cont.Value.Name) == false then
                           game:GetService("ReplicatedStorage").Remotes.QuickLoot:FireServer(Cont.Parent.Name)
                       end
                   end
                   
                   wait(0.5)
                   game:GetService("ReplicatedStorage").Remotes.Loot:InvokeServer(nil)
               end
           end
       end
    end
end)
